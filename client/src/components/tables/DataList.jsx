import React from "react";
import { useTable } from "react-table";
import PropTypes from "prop-types";
import AddRowModal from "../modals/AddRowModal";
import IdentifierCell from "./IdentifierCell";
import DetailsCell from "./DetailsCell";
import "./TableStyles.css";

/**
 * DataList component - Renders a table with personal details data
 * Supports CRUD operations via provided callbacks
 */
function DataList({
  data,
  updateMyData,
  deleteMyData,
  editingIndex,
  setEditingIndex,
  addRow,
  postError,
  updateError,
  deleteError,
}) {
  // Define table columns
  const columns = React.useMemo(
    () => [
      {
        Header: "Identifier",
        accessor: "identifier",
        width: "20%",
        Cell: IdentifierCell,
      },
      {
        Header: "Details",
        accessor: "details",
        width: "60%",
        Cell: DetailsCell,
      },
    ],
    [],
  );

  // Set up react-table
  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =
    useTable({
      columns,
      data,
      // Pass these props to all cells
      initialState: {},
      // Custom props for all cells
      updateMyData,
      editingIndex,
      setEditingIndex,
    });

  // Render error messages if any
  const renderErrorMessages = () => {
    const errors = [];

    if (postError)
      errors.push({ type: "post", message: `Add error: ${postError}` });
    if (updateError)
      errors.push({ type: "update", message: `Update error: ${updateError}` });

    // Only show delete error if it's actually an error message (not a boolean)
    if (deleteError && typeof deleteError === "string") {
      errors.push({ type: "delete", message: `Delete error: ${deleteError}` });
    }

    return errors.length > 0 ? (
      <div className="error-message">
        {errors.map((error) => (
          <div key={`${error.type}-error`}>{error.message}</div>
        ))}
      </div>
    ) : null;
  };

  return (
    <div className="data-table-container">
      {/* Display any error messages */}
      {renderErrorMessages()}

      <table {...getTableProps()} className="data-table table table-striped">
        <thead>
          {headerGroups.map((headerGroup) => {
            const { key, ...headerGroupProps } =
              headerGroup.getHeaderGroupProps();
            return (
              <tr key={key} {...headerGroupProps}>
                {headerGroup.headers.map((column) => {
                  const { key, ...columnProps } = column.getHeaderProps();
                  return (
                    <th
                      key={key}
                      {...columnProps}
                      style={{ width: column.width }}
                    >
                      {column.render("Header")}
                    </th>
                  );
                })}
                <th style={{ width: "20%" }} className="add-button-container">
                  <AddRowModal addRow={addRow} />
                </th>
              </tr>
            );
          })}
        </thead>
        <tbody {...getTableBodyProps()}>
          {rows.map((row) => {
            prepareRow(row);
            const { key, ...rowProps } = row.getRowProps();
            // Use the original data's ID or another unique identifier if available
            // If not available, fall back to the key generated by react-table
            return (
              <tr key={key} {...rowProps}>
                {row.cells.map((cell) => {
                  const { key, ...cellProps } = cell.getCellProps();
                  return (
                    <td key={key} {...cellProps}>
                      {React.cloneElement(cell.render("Cell"), {
                        updateMyData,
                        editingIndex,
                        setEditingIndex,
                      })}
                    </td>
                  );
                })}
                <td className="action-cell">
                  {row.index === editingIndex ? (
                    <button
                      className="action-button done-button"
                      onClick={() => setEditingIndex(null)}
                      aria-label="Done editing"
                    >
                      <span aria-hidden="true">✔️</span>
                    </button>
                  ) : (
                    <>
                      <button
                        className="action-button edit-button"
                        onClick={() => setEditingIndex(row.index)}
                        aria-label="Edit row"
                      >
                        <span aria-hidden="true">✏️</span>
                      </button>
                      <button
                        className="action-button delete-button"
                        onClick={() => deleteMyData(row.index)}
                        aria-label="Delete row"
                      >
                        <span
                          aria-hidden="true"
                          style={{
                            fontSize: "1em",
                            color: "#dc3545",
                            verticalAlign: "middle",
                            display: "inline-block",
                          }}
                        >
                          ❌
                        </span>
                      </button>
                    </>
                  )}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>

      {/* Show a message when there's no data */}
      {rows.length === 0 && (
        <div className="text-center p-3">
          No data available. Click the &quot;+&quot; button to add a new record.
        </div>
      )}
    </div>
  );
}

DataList.propTypes = {
  data: PropTypes.arrayOf(PropTypes.object).isRequired,
  updateMyData: PropTypes.func.isRequired,
  deleteMyData: PropTypes.func.isRequired,
  editingIndex: PropTypes.number,
  setEditingIndex: PropTypes.func.isRequired,
  addRow: PropTypes.func.isRequired,
  postError: PropTypes.string,
  updateError: PropTypes.string,
  deleteError: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
};

export default DataList;
